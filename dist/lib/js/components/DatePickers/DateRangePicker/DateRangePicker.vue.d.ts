import { Instance as DatePickerInstance } from 'flatpickr/dist/types/instance';
import { PropType, Ref } from 'vue';
import { DatePickerCalendarPositions, DatePickerColors, DatePickerStates } from '../DatePicker';

declare const _default: import('vue').DefineComponent<{
    disableDates: Array<Date>;
    date?: (Date | null) | undefined;
    startDate: Date;
    endDate: Date;
    minDate: Date | null;
    maxDate: Date | null;
    calendarPosition: DatePickerCalendarPositions;
    isInteractive: boolean;
    state: DatePickerStates;
    updatePositionBasedOnScrollableSelector: string;
}, {
    flatpickrInstance: Ref<{
        element: HTMLElement;
        input: HTMLInputElement;
        altInput?: HTMLInputElement | undefined;
        _input: HTMLInputElement;
        mobileInput?: HTMLInputElement | undefined;
        mobileFormatStr?: string | undefined;
        selectedDateElem?: import('flatpickr/dist/types/instance').DayElement | undefined;
        todayDateElem?: import('flatpickr/dist/types/instance').DayElement | undefined;
        _positionElement: HTMLElement;
        weekdayContainer: HTMLDivElement;
        calendarContainer: HTMLDivElement;
        innerContainer?: HTMLDivElement | undefined;
        rContainer?: HTMLDivElement | undefined;
        daysContainer?: HTMLDivElement | undefined;
        days: HTMLDivElement;
        weekWrapper?: HTMLDivElement | undefined;
        weekNumbers?: HTMLDivElement | undefined;
        monthNav: HTMLDivElement;
        monthsDropdownContainer: HTMLSelectElement;
        yearElements: HTMLInputElement[];
        monthElements: HTMLSpanElement[];
        currentYearElement: HTMLInputElement;
        currentMonthElement: HTMLSpanElement;
        _hidePrevMonthArrow: boolean;
        _hideNextMonthArrow: boolean;
        prevMonthNav: HTMLElement;
        nextMonthNav: HTMLElement;
        timeContainer?: HTMLDivElement | undefined;
        hourElement?: HTMLInputElement | undefined;
        minuteElement?: HTMLInputElement | undefined;
        secondElement?: HTMLInputElement | undefined;
        amPM?: HTMLSpanElement | undefined;
        pluginElements: Node[];
        revFormat: import('flatpickr/dist/utils/formatting').RevFormat;
        formats: {
            D: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            M: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            i: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            s: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            u: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            w: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            l: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            h: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            j: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            n: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            y: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            m: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            d: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            S: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            F: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            G: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            H: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            J: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            K: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            U: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            W: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            Y: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            Z: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
        };
        tokenRegex: {
            D: string;
            M: string;
            i: string;
            s: string;
            u: string;
            w: string;
            l: string;
            h: string;
            j: string;
            n: string;
            y: string;
            m: string;
            d: string;
            S: string;
            F: string;
            G: string;
            H: string;
            J: string;
            K: string;
            U: string;
            W: string;
            Y: string;
            Z: string;
        };
        minRangeDate?: Date | undefined;
        maxRangeDate?: Date | undefined;
        now: Date;
        latestSelectedDateObj?: Date | undefined;
        _selectedDateObj?: Date | undefined;
        selectedDates: Date[];
        _initialDate: Date;
        config: {
            _disable: (Date | ((date: Date) => boolean) | {
                from: Date;
                to: Date;
            })[];
            _enable?: (Date | ((date: Date) => boolean) | {
                from: Date;
                to: Date;
            })[] | undefined;
            _maxDate?: Date | undefined;
            _maxTime?: Date | undefined;
            _minDate?: Date | undefined;
            _minTime?: Date | undefined;
            allowInput: boolean;
            allowInvalidPreload: boolean;
            altFormat: string;
            altInput: boolean;
            altInputClass: string;
            animate: boolean;
            appendTo?: HTMLElement | undefined;
            ariaDateFormat: string;
            autoFillDefaultTime: boolean;
            clickOpens: boolean;
            closeOnSelect: boolean;
            conjunction: string;
            dateFormat: string;
            defaultDate?: (Date | Date[]) | undefined;
            defaultHour: number;
            defaultMinute: number;
            defaultSeconds: number;
            disable: (Date | ((date: Date) => boolean) | {
                from: Date;
                to: Date;
            })[];
            disableMobile: boolean;
            enable?: (Date | ((date: Date) => boolean) | {
                from: Date;
                to: Date;
            })[] | undefined;
            enableSeconds: boolean;
            enableTime: boolean;
            errorHandler: (err: Error) => void;
            formatDate?: ((date: Date, format: string, locale: import('flatpickr/dist/types/locale').Locale) => string) | undefined;
            getWeek: (date: Date) => string | number;
            hourIncrement: number;
            ignoredFocusElements: HTMLElement[];
            inline: boolean;
            locale: import('flatpickr/dist/types/locale').key | {
                ordinal?: import('flatpickr/dist/types/locale').Locale["ordinal"] | undefined;
                daysInMonth?: import('flatpickr/dist/types/locale').Locale["daysInMonth"] | undefined;
                firstDayOfWeek?: import('flatpickr/dist/types/locale').Locale["firstDayOfWeek"] | undefined;
                rangeSeparator?: import('flatpickr/dist/types/locale').Locale["rangeSeparator"] | undefined;
                weekAbbreviation?: import('flatpickr/dist/types/locale').Locale["weekAbbreviation"] | undefined;
                toggleTitle?: import('flatpickr/dist/types/locale').Locale["toggleTitle"] | undefined;
                scrollTitle?: import('flatpickr/dist/types/locale').Locale["scrollTitle"] | undefined;
                yearAriaLabel?: string | undefined;
                monthAriaLabel?: string | undefined;
                hourAriaLabel?: string | undefined;
                minuteAriaLabel?: string | undefined;
                amPM?: import('flatpickr/dist/types/locale').Locale["amPM"] | undefined;
                time_24hr?: import('flatpickr/dist/types/locale').Locale["time_24hr"] | undefined;
                weekdays: {
                    shorthand: [string, string, string, string, string, string, string];
                    longhand: [string, string, string, string, string, string, string];
                };
                months: {
                    shorthand: [string, string, string, string, string, string, string, string, string, string, string, string];
                    longhand: [string, string, string, string, string, string, string, string, string, string, string, string];
                };
            };
            maxDate?: Date | undefined;
            maxTime?: Date | undefined;
            minDate?: Date | undefined;
            minTime?: Date | undefined;
            minuteIncrement: number;
            mode: import('flatpickr/dist/types/options').BaseOptions["mode"];
            monthSelectorType: string;
            nextArrow: string;
            noCalendar: boolean;
            now: Date;
            onChange: import('flatpickr/dist/types/options').Hook[];
            onClose: import('flatpickr/dist/types/options').Hook[];
            onDayCreate: import('flatpickr/dist/types/options').Hook[];
            onDestroy: import('flatpickr/dist/types/options').Hook[];
            onKeyDown: import('flatpickr/dist/types/options').Hook[];
            onMonthChange: import('flatpickr/dist/types/options').Hook[];
            onOpen: import('flatpickr/dist/types/options').Hook[];
            onParseConfig: import('flatpickr/dist/types/options').Hook[];
            onReady: import('flatpickr/dist/types/options').Hook[];
            onValueUpdate: import('flatpickr/dist/types/options').Hook[];
            onYearChange: import('flatpickr/dist/types/options').Hook[];
            onPreCalendarPosition: import('flatpickr/dist/types/options').Hook[];
            parseDate?: import('flatpickr/dist/types/options').BaseOptions["parseDate"] | undefined;
            plugins: import('flatpickr/dist/types/options').Plugin[];
            position: import('flatpickr/dist/types/options').BaseOptions["position"];
            positionElement?: HTMLElement | undefined;
            prevArrow: string;
            shorthandCurrentMonth: boolean;
            showMonths: number;
            static: boolean;
            time_24hr: boolean;
            weekNumbers: boolean;
            wrap: boolean;
        };
        loadedPlugins: string[];
        l10n: {
            weekdays: {
                shorthand: [string, string, string, string, string, string, string];
                longhand: [string, string, string, string, string, string, string];
            };
            months: {
                shorthand: [string, string, string, string, string, string, string, string, string, string, string, string];
                longhand: [string, string, string, string, string, string, string, string, string, string, string, string];
            };
            daysInMonth: [number, number, number, number, number, number, number, number, number, number, number, number];
            firstDayOfWeek: number;
            ordinal: (nth: number) => string;
            rangeSeparator: string;
            weekAbbreviation: string;
            scrollTitle: string;
            toggleTitle: string;
            amPM: [string, string];
            yearAriaLabel: string;
            monthAriaLabel: string;
            hourAriaLabel: string;
            minuteAriaLabel: string;
            time_24hr: boolean;
        };
        currentYear: number;
        currentMonth: number;
        isOpen: boolean;
        isMobile: boolean;
        minDateHasTime: boolean;
        maxDateHasTime: boolean;
        changeMonth: (value: number, isOffset?: boolean, fromKeyboard?: boolean) => void;
        changeYear: (year: number) => void;
        clear: (emitChangeEvent?: boolean, toInitial?: boolean) => void;
        close: () => void;
        destroy: () => void;
        isEnabled: (date: import('flatpickr/dist/types/options').DateOption, timeless?: boolean) => boolean;
        jumpToDate: (date?: import('flatpickr/dist/types/options').DateOption, triggerChange?: boolean) => void;
        updateValue: (triggerChange?: boolean) => void;
        onMouseOver: (elem?: import('flatpickr/dist/types/instance').DayElement, cellClass?: string) => void;
        open: (e?: FocusEvent | MouseEvent, positionElement?: HTMLElement) => void;
        redraw: () => void;
        set: (option: keyof import('flatpickr/dist/types/options').Options | { [k in keyof import('flatpickr/dist/types/options').Options]?: import('flatpickr/dist/types/options').Options[k]; }, value?: any) => void;
        setDate: (date: import('flatpickr/dist/types/options').DateOption | import('flatpickr/dist/types/options').DateOption[], triggerChange?: boolean, format?: string) => void;
        toggle: () => void;
        pad: (num: string | number) => string;
        parseDate: (date: Date | string | number, givenFormat?: string, timeless?: boolean) => Date | undefined;
        formatDate: (dateObj: Date, frmt: string) => string;
        _handlers: {
            remove: () => void;
        }[];
        _bind: <E extends Element | Window | Document>(element: E | E[], event: string | string[], handler: (e?: any) => void, options?: {
            capture?: boolean;
            once?: boolean;
            passive?: boolean;
        }) => void;
        _createElement: <E extends HTMLElement>(tag: keyof HTMLElementTagNameMap, className: string, content?: string) => E;
        createDay: (className: string, date: Date, dayNumber: number, i: number) => import('flatpickr/dist/types/instance').DayElement;
        _setHoursFromDate: (date: Date) => void;
        _debouncedChange: () => void;
        __hideNextMonthArrow: boolean;
        __hidePrevMonthArrow: boolean;
        _positionCalendar: (customPositionElement?: HTMLElement) => void;
        utils: {
            getDaysInMonth: (month?: number, year?: number) => number;
        };
    } | null, DatePickerInstance | {
        element: HTMLElement;
        input: HTMLInputElement;
        altInput?: HTMLInputElement | undefined;
        _input: HTMLInputElement;
        mobileInput?: HTMLInputElement | undefined;
        mobileFormatStr?: string | undefined;
        selectedDateElem?: import('flatpickr/dist/types/instance').DayElement | undefined;
        todayDateElem?: import('flatpickr/dist/types/instance').DayElement | undefined;
        _positionElement: HTMLElement;
        weekdayContainer: HTMLDivElement;
        calendarContainer: HTMLDivElement;
        innerContainer?: HTMLDivElement | undefined;
        rContainer?: HTMLDivElement | undefined;
        daysContainer?: HTMLDivElement | undefined;
        days: HTMLDivElement;
        weekWrapper?: HTMLDivElement | undefined;
        weekNumbers?: HTMLDivElement | undefined;
        monthNav: HTMLDivElement;
        monthsDropdownContainer: HTMLSelectElement;
        yearElements: HTMLInputElement[];
        monthElements: HTMLSpanElement[];
        currentYearElement: HTMLInputElement;
        currentMonthElement: HTMLSpanElement;
        _hidePrevMonthArrow: boolean;
        _hideNextMonthArrow: boolean;
        prevMonthNav: HTMLElement;
        nextMonthNav: HTMLElement;
        timeContainer?: HTMLDivElement | undefined;
        hourElement?: HTMLInputElement | undefined;
        minuteElement?: HTMLInputElement | undefined;
        secondElement?: HTMLInputElement | undefined;
        amPM?: HTMLSpanElement | undefined;
        pluginElements: Node[];
        revFormat: import('flatpickr/dist/utils/formatting').RevFormat;
        formats: {
            D: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            M: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            i: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            s: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            u: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            w: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            l: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            h: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            j: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            n: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            y: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            m: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            d: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            S: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            F: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            G: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            H: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            J: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            K: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            U: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            W: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            Y: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
            Z: (date: Date, locale: import('flatpickr/dist/types/locale').Locale, options: import('flatpickr/dist/types/options').ParsedOptions) => string | number;
        };
        tokenRegex: {
            D: string;
            M: string;
            i: string;
            s: string;
            u: string;
            w: string;
            l: string;
            h: string;
            j: string;
            n: string;
            y: string;
            m: string;
            d: string;
            S: string;
            F: string;
            G: string;
            H: string;
            J: string;
            K: string;
            U: string;
            W: string;
            Y: string;
            Z: string;
        };
        minRangeDate?: Date | undefined;
        maxRangeDate?: Date | undefined;
        now: Date;
        latestSelectedDateObj?: Date | undefined;
        _selectedDateObj?: Date | undefined;
        selectedDates: Date[];
        _initialDate: Date;
        config: {
            _disable: (Date | ((date: Date) => boolean) | {
                from: Date;
                to: Date;
            })[];
            _enable?: (Date | ((date: Date) => boolean) | {
                from: Date;
                to: Date;
            })[] | undefined;
            _maxDate?: Date | undefined;
            _maxTime?: Date | undefined;
            _minDate?: Date | undefined;
            _minTime?: Date | undefined;
            allowInput: boolean;
            allowInvalidPreload: boolean;
            altFormat: string;
            altInput: boolean;
            altInputClass: string;
            animate: boolean;
            appendTo?: HTMLElement | undefined;
            ariaDateFormat: string;
            autoFillDefaultTime: boolean;
            clickOpens: boolean;
            closeOnSelect: boolean;
            conjunction: string;
            dateFormat: string;
            defaultDate?: (Date | Date[]) | undefined;
            defaultHour: number;
            defaultMinute: number;
            defaultSeconds: number;
            disable: (Date | ((date: Date) => boolean) | {
                from: Date;
                to: Date;
            })[];
            disableMobile: boolean;
            enable?: (Date | ((date: Date) => boolean) | {
                from: Date;
                to: Date;
            })[] | undefined;
            enableSeconds: boolean;
            enableTime: boolean;
            errorHandler: (err: Error) => void;
            formatDate?: ((date: Date, format: string, locale: import('flatpickr/dist/types/locale').Locale) => string) | undefined;
            getWeek: (date: Date) => string | number;
            hourIncrement: number;
            ignoredFocusElements: HTMLElement[];
            inline: boolean;
            locale: import('flatpickr/dist/types/locale').key | {
                ordinal?: import('flatpickr/dist/types/locale').Locale["ordinal"] | undefined;
                daysInMonth?: import('flatpickr/dist/types/locale').Locale["daysInMonth"] | undefined;
                firstDayOfWeek?: import('flatpickr/dist/types/locale').Locale["firstDayOfWeek"] | undefined;
                rangeSeparator?: import('flatpickr/dist/types/locale').Locale["rangeSeparator"] | undefined;
                weekAbbreviation?: import('flatpickr/dist/types/locale').Locale["weekAbbreviation"] | undefined;
                toggleTitle?: import('flatpickr/dist/types/locale').Locale["toggleTitle"] | undefined;
                scrollTitle?: import('flatpickr/dist/types/locale').Locale["scrollTitle"] | undefined;
                yearAriaLabel?: string | undefined;
                monthAriaLabel?: string | undefined;
                hourAriaLabel?: string | undefined;
                minuteAriaLabel?: string | undefined;
                amPM?: import('flatpickr/dist/types/locale').Locale["amPM"] | undefined;
                time_24hr?: import('flatpickr/dist/types/locale').Locale["time_24hr"] | undefined;
                weekdays: {
                    shorthand: [string, string, string, string, string, string, string];
                    longhand: [string, string, string, string, string, string, string];
                };
                months: {
                    shorthand: [string, string, string, string, string, string, string, string, string, string, string, string];
                    longhand: [string, string, string, string, string, string, string, string, string, string, string, string];
                };
            };
            maxDate?: Date | undefined;
            maxTime?: Date | undefined;
            minDate?: Date | undefined;
            minTime?: Date | undefined;
            minuteIncrement: number;
            mode: import('flatpickr/dist/types/options').BaseOptions["mode"];
            monthSelectorType: string;
            nextArrow: string;
            noCalendar: boolean;
            now: Date;
            onChange: import('flatpickr/dist/types/options').Hook[];
            onClose: import('flatpickr/dist/types/options').Hook[];
            onDayCreate: import('flatpickr/dist/types/options').Hook[];
            onDestroy: import('flatpickr/dist/types/options').Hook[];
            onKeyDown: import('flatpickr/dist/types/options').Hook[];
            onMonthChange: import('flatpickr/dist/types/options').Hook[];
            onOpen: import('flatpickr/dist/types/options').Hook[];
            onParseConfig: import('flatpickr/dist/types/options').Hook[];
            onReady: import('flatpickr/dist/types/options').Hook[];
            onValueUpdate: import('flatpickr/dist/types/options').Hook[];
            onYearChange: import('flatpickr/dist/types/options').Hook[];
            onPreCalendarPosition: import('flatpickr/dist/types/options').Hook[];
            parseDate?: import('flatpickr/dist/types/options').BaseOptions["parseDate"] | undefined;
            plugins: import('flatpickr/dist/types/options').Plugin[];
            position: import('flatpickr/dist/types/options').BaseOptions["position"];
            positionElement?: HTMLElement | undefined;
            prevArrow: string;
            shorthandCurrentMonth: boolean;
            showMonths: number;
            static: boolean;
            time_24hr: boolean;
            weekNumbers: boolean;
            wrap: boolean;
        };
        loadedPlugins: string[];
        l10n: {
            weekdays: {
                shorthand: [string, string, string, string, string, string, string];
                longhand: [string, string, string, string, string, string, string];
            };
            months: {
                shorthand: [string, string, string, string, string, string, string, string, string, string, string, string];
                longhand: [string, string, string, string, string, string, string, string, string, string, string, string];
            };
            daysInMonth: [number, number, number, number, number, number, number, number, number, number, number, number];
            firstDayOfWeek: number;
            ordinal: (nth: number) => string;
            rangeSeparator: string;
            weekAbbreviation: string;
            scrollTitle: string;
            toggleTitle: string;
            amPM: [string, string];
            yearAriaLabel: string;
            monthAriaLabel: string;
            hourAriaLabel: string;
            minuteAriaLabel: string;
            time_24hr: boolean;
        };
        currentYear: number;
        currentMonth: number;
        isOpen: boolean;
        isMobile: boolean;
        minDateHasTime: boolean;
        maxDateHasTime: boolean;
        changeMonth: (value: number, isOffset?: boolean, fromKeyboard?: boolean) => void;
        changeYear: (year: number) => void;
        clear: (emitChangeEvent?: boolean, toInitial?: boolean) => void;
        close: () => void;
        destroy: () => void;
        isEnabled: (date: import('flatpickr/dist/types/options').DateOption, timeless?: boolean) => boolean;
        jumpToDate: (date?: import('flatpickr/dist/types/options').DateOption, triggerChange?: boolean) => void;
        updateValue: (triggerChange?: boolean) => void;
        onMouseOver: (elem?: import('flatpickr/dist/types/instance').DayElement, cellClass?: string) => void;
        open: (e?: FocusEvent | MouseEvent, positionElement?: HTMLElement) => void;
        redraw: () => void;
        set: (option: keyof import('flatpickr/dist/types/options').Options | { [k in keyof import('flatpickr/dist/types/options').Options]?: import('flatpickr/dist/types/options').Options[k]; }, value?: any) => void;
        setDate: (date: import('flatpickr/dist/types/options').DateOption | import('flatpickr/dist/types/options').DateOption[], triggerChange?: boolean, format?: string) => void;
        toggle: () => void;
        pad: (num: string | number) => string;
        parseDate: (date: Date | string | number, givenFormat?: string, timeless?: boolean) => Date | undefined;
        formatDate: (dateObj: Date, frmt: string) => string;
        _handlers: {
            remove: () => void;
        }[];
        _bind: <E extends Element | Window | Document>(element: E | E[], event: string | string[], handler: (e?: any) => void, options?: {
            capture?: boolean;
            once?: boolean;
            passive?: boolean;
        }) => void;
        _createElement: <E extends HTMLElement>(tag: keyof HTMLElementTagNameMap, className: string, content?: string) => E;
        createDay: (className: string, date: Date, dayNumber: number, i: number) => import('flatpickr/dist/types/instance').DayElement;
        _setHoursFromDate: (date: Date) => void;
        _debouncedChange: () => void;
        __hideNextMonthArrow: boolean;
        __hidePrevMonthArrow: boolean;
        _positionCalendar: (customPositionElement?: HTMLElement) => void;
        utils: {
            getDaysInMonth: (month?: number, year?: number) => number;
        };
    } | null>;
    dateRangePickerRef: Ref<HTMLDivElement, HTMLDivElement>;
    flatpickrInputRef: Ref<HTMLInputElement, HTMLInputElement>;
    isOpen: Ref<boolean, boolean>;
    toggleDatePicker: () => void;
    createDatePicker: (flatpickrInputElement: HTMLInputElement, dateRangePickerRef: HTMLElement, updatePositionBasedOnScrollableSelector: string) => Promise<DatePickerInstance | undefined>;
    destroyDatePicker: () => void;
    updateDatePicker: () => void;
    DATE_PICKER_CALENDAR_POSITIONS: Readonly<{
        TOP: string;
        TOP_LEFT: string;
        TOP_RIGHT: string;
        BOTTOM: string;
        BOTTOM_LEFT: string;
        BOTTOM_RIGHT: string;
    }>;
    DATE_PICKER_COLORS: Readonly<{
        NEUTRAL_WEAK: string;
        NEUTRAL: string;
        WARNING: string;
        DANGER: string;
    }>;
    DATE_PICKER_STATES: Readonly<{
        DEFAULT: string;
        DISABLED: string;
        LOADING: string;
    }>;
    DATE_PICKER_TRIGGER_TYPES: Readonly<{
        BOX: string;
        TILE: string;
    }>;
}, {}, {}, {
    bindFlatpickrInstance(): Promise<void>;
    toggle(): Promise<void>;
}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    'update:date': (value: {
        startDate: Date;
        endDate: Date;
    }) => true;
}, string, import('vue').PublicProps, Readonly<{
    disableDates: Array<Date>;
    date?: (Date | null) | undefined;
    startDate: Date;
    endDate: Date;
    minDate: Date | null;
    maxDate: Date | null;
    calendarPosition: DatePickerCalendarPositions;
    isInteractive: boolean;
    state: DatePickerStates;
    updatePositionBasedOnScrollableSelector: string;
}> & Readonly<{
    "onUpdate:date"?: ((value: {
        startDate: Date;
        endDate: Date;
    }) => any) | undefined;
}>, {
    color: string;
    state: string;
    isInteractive: boolean;
    placeholder: string;
    startDate: Date;
    endDate: Date;
    startIcon: any;
    endIcon: any;
    areIconsHiddenOnMobile: boolean;
    errorMessage: string;
    calendarPosition: string;
    disableDates: Date[];
    minDate: Date;
    maxDate: Date;
    updatePositionBasedOnScrollableSelector: string;
}, {}, {
    DateBox: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        isInteractive: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        startDate: {
            type: DateConstructor;
            default: null;
        };
        endDate: {
            type: DateConstructor;
            default: null;
        };
        startIcon: {
            type: ObjectConstructor;
            default: null;
            validate: (icon: any) => boolean;
        };
        endIcon: {
            type: ObjectConstructor;
            default: null;
            validate: (icon: any) => boolean;
        };
        areIconsHiddenOnMobile: {
            type: BooleanConstructor;
            default: boolean;
        };
        state: {
            type: PropType<string>;
            default: string;
        };
        color: {
            type: PropType<DatePickerColors>;
            default: string;
        };
        isOpen: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>, {}, {
        ICONS: Readonly<{
            readonly ANSWERS: VueConstructor<Vue>;
            readonly CHANGE: VueConstructor<Vue>;
            readonly COMMENTS_CHECK: VueConstructor<Vue>;
            readonly HEAD_WITH_QUESTION_MARK: VueConstructor<Vue>;
            readonly HIDE_ANSWERS: VueConstructor<Vue>;
            readonly RIBBON: VueConstructor<Vue>;
            readonly SIDEBAR_FLIP_SOLID: VueConstructor<Vue>;
            readonly SLIDERS_SEARCH: VueConstructor<Vue>;
            readonly FA_ADDRESS_CARD: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ANGLE_DOWN: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ANGLE_LEFT: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ANGLE_RIGHT: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ANGLE_UP: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ARROW_DOWN_LEFT_AND_ARROW_UP_RIGHT_TO_CENTER: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ARROW_DOWN_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ARROW_DOWN_TO_LINE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ARROW_LEFT_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ARROW_POINTER: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ARROW_RIGHT_FROM_BRACKET: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ARROW_RIGHT_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ARROW_ROTATE_LEFT: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ARROW_ROTATE_RIGHT: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ARROW_UP_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ARROW_UP_RIGHT_AND_ARROW_DOWN_LEFT_FROM_CENTER: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ARROW_UP_RIGHT_FROM_SQUARE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ARROWS_LEFT_RIGHT_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ARROWS_MAXIMIZE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ARROWS_ROTATE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ATOM: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_BADGE_PERCENT: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_BAN: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_BARS: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_BELL: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_BELL_SLASH: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_BOOKS: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_BOOK: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_BOOK_BLANK: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_BOOK_COPY: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_BOOK_SPARKLES_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_BOOKMARK_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_BOX: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_BOX_ARCHIVE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CALENDAR: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CALENDAR_CLOCK: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CALENDAR_CIRCLE_EXCLAMATION: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CALENDAR_CHECK: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CALENDAR_DAY: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CALENDAR_DAYS: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CALENDAR_RANGE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CALENDAR_XMARK: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CAMERA_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CARET_SQUARE_RIGHT_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CART_SHOPPING: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CHART_COLUMN: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CHART_LINE_UP: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CHECK_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CHEVRON_DOWN: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CHEVRON_LEFT: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CHEVRON_LEFT_LIGHT: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CHEVRON_RIGHT: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CHEVRON_RIGHT_LIGHT: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CHEVRON_UP: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CIRCLE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CIRCLE_ARROW_LEFT: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CIRCLE_ARROW_RIGHT: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CIRCLE_CHECK: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CIRCLE_CHECK_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CIRCLE_ELLIPSIS: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CIRCLE_EXCLAMATION: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CIRCLE_INFO: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CIRCLE_NOTCH: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CIRCLE_PLAY_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CIRCLE_QUESTION: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CIRCLE_XMARK: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CLIPBOARD_MEDICAL: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CLIPBOARD_LIST: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CLOCK: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CLOCK_ROTATE_LEFT: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CODE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CODE_SIMPLE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_COMMENT: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_COMMENT_DOTS: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_COMMENT_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_COMMENTS: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_COMMENTS_QUESTION: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_COMMENTS_QUESTION_CHECK: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_COMPASS_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_COMPRESS: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_COPY: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_CREDIT_CARD: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_DOT_CIRCLE_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_EARTH_AMERICAS: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ELLIPSIS: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ELLIPSIS_VERTICAL: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_EXCLAMATION_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_EYE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_EYE_SLASH: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_FACE_FROWN: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_FACE_GRIMACE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_FACE_MEH: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_FACE_SMILE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_FACEBOOK: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_FILE_CHECK: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_FILE_INVOICE_DOLLAR: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_FILE_LINES: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_FILE_LINES_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_FILE_MAGNIFYING_GLASS: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_FILE_PEN_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_FILM: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_FILTER: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_FLAG: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_FLAG_CHECKERED_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_FLASK_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_FLOPPY_DISK: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_FOLDER_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_GAUGE_HIGH: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_GEAR: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_GEAR_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_GEARS_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_GEM: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_GIFT: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_GRADUATION_CAP: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_GRID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_HAND_POINT_LEFT: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_HAND_POINT_RIGHT: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_HAND_SPOCK_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_HANDS_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_HEART_PULSE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_HEART_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_HOURGLASS: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_HOURGLASS_END: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_HOURGLASS_START: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_HOUSE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_IMAGES: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_IMAGES_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_INFO_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_KEY: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_KEYBOARD: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_LIGHTBULB: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_LIGHTBULB_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_LINK: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_LINK_SLASH: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_LIST: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_LIST_CHECK: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_LIST_OL: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_LOCATION_DOT: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_LOCK_KEYHOLE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_MAGNIFYING_GLASS: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_MEDAL: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_MEMO_CIRCLE_INFO: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_MEMO_CIRCLE_INFO_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_MESSAGES: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_MESSAGE_QUESTION_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_MESSAGE_QUESTION: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_MESSAGE_XMARK: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_MESSAGE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_MINUS: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_MONEY_BILL1: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_MUSIC: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_PAPER_PLANE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_PAPERCLIP: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_PEN_CIRCLE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_PEN_FIELD: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_PENCIL: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_PILLS_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_PLAY: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_PLUS: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_PRESENTATION_SCREEN: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_PRINT: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_RECTANGLE_CODE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_RECTANGLE_LIST: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_REPLY: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_ROTATE_LEFT: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_SHARE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_SHARE_NODES: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_SHIELD_HALVED: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_SIDEBAR_FLIP: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_SIGNAL: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_SITEMAP: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_SITEMAP_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_SLIDERS: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_SPELL_CHECK: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_SQUARE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_SQUARE_CARET_RIGHT: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_SQUARE_CHECK: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_SQUARE_CHECK_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_SQUARE_LIST: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_SQUARE_LIST_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_STAR: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_STAR_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_STETHOSCOPE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_STOPWATCH_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_TAG: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_TAGS: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_TEXT: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_TEXT_SLASH: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_THUMBS_UP: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_THUMBS_UP_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_THUMBTACK: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_THUMBTACK_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_TRASH_CAN: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_TREE_PALM: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_TRIANGLE_EXCLAMATION: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_TRIANGLE_EXCLAMATION_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_TROPHY_STAR: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_UNLOCK_KEYHOLE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_UPLOAD: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_USER: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_USER_GEAR: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_USER_DOCTOR_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_VIDEO_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_VOLUME_HIGH_SOLID: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_WAND_MAGIC_SPARKLES: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_WINDOW_MAXIMIZE: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FA_XMARK: import('@fortawesome/fontawesome-common-types').IconDefinition;
            readonly FAD_SPINNER_THIRD: import('@fortawesome/fontawesome-common-types').IconDefinition;
        }>;
        ICON_SIZES: Readonly<{
            XXX_SMALL: string;
            XX_SMALL: string;
            X_SMALL: string;
            SMALL: string;
            MEDIUM: string;
            LARGE: string;
            X_LARGE: string;
            XX_LARGE: string;
        }>;
        DATE_PICKER_STATES: Readonly<{
            DEFAULT: string;
            DISABLED: string;
            LOADING: string;
        }>;
        DATE_PICKER_COLORS: Readonly<{
            NEUTRAL_WEAK: string;
            NEUTRAL: string;
            WARNING: string;
            DANGER: string;
        }>;
    }, {
        startDateText(): any;
        endDateIfDifferentThanStartDate(): any;
        endDateText(): string;
        startDateEyebrowText(): string;
        endDateEyebrowText(): string;
    }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        isInteractive: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        startDate: {
            type: DateConstructor;
            default: null;
        };
        endDate: {
            type: DateConstructor;
            default: null;
        };
        startIcon: {
            type: ObjectConstructor;
            default: null;
            validate: (icon: any) => boolean;
        };
        endIcon: {
            type: ObjectConstructor;
            default: null;
            validate: (icon: any) => boolean;
        };
        areIconsHiddenOnMobile: {
            type: BooleanConstructor;
            default: boolean;
        };
        state: {
            type: PropType<string>;
            default: string;
        };
        color: {
            type: PropType<DatePickerColors>;
            default: string;
        };
        isOpen: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & Readonly<{}>, {
        color: string;
        state: string;
        isInteractive: boolean;
        placeholder: string;
        startDate: Date;
        endDate: Date;
        startIcon: Record<string, any>;
        endIcon: Record<string, any>;
        areIconsHiddenOnMobile: boolean;
        isOpen: boolean;
    }, {}, {
        DsIcon: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            icon: {
                type: ObjectConstructor;
                required: true;
                validator(icon: unknown): boolean;
            };
            size: {
                type: StringConstructor;
                default: string;
                validator: (value: string) => boolean;
            };
            rotation: {
                type: (NumberConstructor | null)[];
                default: null;
            };
            flippedVertical: {
                type: BooleanConstructor;
                default: boolean;
            };
            flippedHorizontal: {
                type: BooleanConstructor;
                default: boolean;
            };
            touchable: {
                type: BooleanConstructor;
                default: boolean;
            };
            spinning: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>, {}, {}, {
            sizeClassName(): string;
            isFontawesomeIcon(): boolean;
        }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            icon: {
                type: ObjectConstructor;
                required: true;
                validator(icon: unknown): boolean;
            };
            size: {
                type: StringConstructor;
                default: string;
                validator: (value: string) => boolean;
            };
            rotation: {
                type: (NumberConstructor | null)[];
                default: null;
            };
            flippedVertical: {
                type: BooleanConstructor;
                default: boolean;
            };
            flippedHorizontal: {
                type: BooleanConstructor;
                default: boolean;
            };
            touchable: {
                type: BooleanConstructor;
                default: boolean;
            };
            spinning: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & Readonly<{}>, {
            rotation: number | null;
            size: string;
            flippedVertical: boolean;
            flippedHorizontal: boolean;
            touchable: boolean;
            spinning: boolean;
        }, {}, {
            FontAwesomeIcon: import('vue').DefineComponent<import('@fortawesome/vue-fontawesome').FontAwesomeIconProps>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default _default;
