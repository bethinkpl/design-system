import{G as n,f as h,a as c,b as o,g as b,e as _,h as p,R as m}from"./GroupRichListItem-CC3NA0FJ.js";import{D as I}from"./Divider-Ba-XwrF-.js";import{c as a,I as d}from"./Icon-CVHceNst.js";import"./vue.esm-bundler-Bq1ZKmuF.js";import"./Checkbox-DKqKTnpD.js";import"./SelectionControl-DB3v0tUg.js";import"./_plugin-vue_export-helper-DlAUqK2U.js";const R={title:"Components/RichList/GroupRichListItem",component:n,decorators:[e=>({template:'<div style="display: flex;padding: 16px;"><story/></div>'})]},S={isExpanded:!1,borderColor:null,borderColorHex:"",backgroundColor:h.NEUTRAL,parent_size:c.MEDIUM,parent_elevation:null,parent_isDimmed:!1,parent_hasDraggableHandler:!0,parent_icon:null,parent_iconColor:a.NEUTRAL_WEAK,parent_iconColorHex:"",parent_hasActionsSlotDivider:!0,parent_isSelectable:!0,parent_isSelected:!0,parent_state:o.DEFAULT,parent_isInteractive:!0,child_size:c.MEDIUM,child_elevation:null,child_isDimmed:!1,child_hasDraggableHandler:!0,child_icon:null,child_iconColor:a.NEUTRAL_WEAK,child_iconColorHex:"",child_hasActionsSlotDivider:!0,child_isSelectable:!0,child_isSelected:!0,child_state:o.DEFAULT,child_isInteractive:!0},u={borderColor:{options:[null,...Object.values(b)],control:"select"},borderColorHex:{control:"text"},backgroundColor:{options:Object.values(h),control:"select"},parent_state:{options:Object.values(o),control:"select"},parent_size:{options:Object.values(c),control:"select"},parent_iconColor:{options:Object.values(a),control:"select"},parent_icon:{options:[null,...Object.keys(d)],control:"select"},parent_iconColorHex:{control:"text"},parent_elevation:{options:[null,...Object.values(_)],control:"select"},child_state:{options:Object.values(o),control:"select"},child_size:{options:Object.values(c),control:"select"},child_iconColor:{options:Object.values(a),control:"select"},child_icon:{options:[null,...Object.keys(d)],control:"select"},child_iconColorHex:{control:"text"},child_elevation:{options:[null,...Object.values(_)],control:"select"}},l="<template #content>Content slot</template><template #metadata>Metadata slot</template><template #actions>ACS</template>",C=e=>(e.argTypes=u,e.args=S,e.parameters={layout:"fullscreen",design:{type:"figma",url:"https://www.figma.com/file/izQdYyiBR1GQgFkaOIfIJI/LMS---DS-Components?type=design&node-id=8505-126430&mode=design&t=7Ay1DzrwONAPwSGv-4"}},e),g=(e,{updateArgs:i})=>({components:{GroupRichListItem:n,RichListItem:p,Divider:I},setup(){return e},data(){return{RICH_LIST_ITEM_TYPE:Object.freeze(m),RICH_LIST_ITEM_STATE:Object.freeze(o),ICONS:Object.freeze(d)}},methods:{updateParentIsSelected(t){i({parent_isSelected:t})},updateChildIsSelected(t){i({child_isSelected:t})},onClick(){i({isExpanded:!this.isExpanded})}},template:`
      <group-rich-list-item
        :is-expanded="isExpanded"
        :border-color="borderColor"
        :border-color-hex="borderColorHex"
        :background-color="backgroundColor"
      >
        <template #parent>
          <rich-list-item
            :state="parent_state"
            :is-dimmed="parent_isDimmed"
            :type="RICH_LIST_ITEM_TYPE.FLAT"
            :is-selectable="parent_isSelectable"
            :is-selected="parent_isSelected"
            :size="parent_size"
            :is-interactive="parent_isInteractive"
            :is-draggable="parent_isDraggable"
            :icon="ICONS[parent_icon]"
            :icon-color="parent_iconColor"
            :icon-color-hex="parent_iconColorHex"
            :has-draggable-handler="parent_hasDraggableHandler"
            :has-actions-slot-divider="parent_hasActionsSlotDivider"
            @click="onClick"
                        @update:is-selected="updateParentIsSelected"
          >
            ${l}
          </rich-list-item>
        </template>
        <template #children>
          <rich-list-item
            :state="child_state"
            :is-dimmed="child_isDimmed"
            :type="RICH_LIST_ITEM_TYPE.FLAT"
            :is-selectable="child_isSelectable"
            :is-selected="child_isSelected"
            :size="child_size"
            :is-interactive="child_isInteractive"
            :is-draggable="child_isDraggable"
            :icon="ICONS[child_icon]"
            :icon-color="child_iconColor"
            :icon-color-hex="child_iconColorHex"
            :has-draggable-handler="child_hasDraggableHandler"
            :has-actions-slot-divider="child_hasActionsSlotDivider"
            @update:is-selected="updateChildIsSelected"
          >
            ${l}
          </rich-list-item>
        </template>
      </group-rich-list-item>
    `}),r=C(g.bind({})),T=(e,{updateArgs:i})=>({components:{GroupRichListItem:n,RichListItem:p,Divider:I},setup(){return e},data(){return{RICH_LIST_ITEM_TYPE:Object.freeze(m),RICH_LIST_ITEM_STATE:Object.freeze(o),ICONS:Object.freeze(d)}},methods:{updateParentIsSelected(t){i({parent_isSelected:t})},updateChildIsSelected(t){i({child_isSelected:t})},onClick(){i({isExpanded:!this.isExpanded})}},template:`
      <group-rich-list-item
        :is-expanded="isExpanded"
        :is-dimmed="isDimmed"
        :border-color="borderColor"
        :border-color-hex="borderColorHex"
        :background-color="backgroundColor"
      >
        <template #parent>
          <rich-list-item
            :state="parent_state"
            :is-dimmed="parent_isDimmed"
            :type="RICH_LIST_ITEM_TYPE.FLAT"
            :is-selectable="parent_isSelectable"
            :is-selected="parent_isSelected"
            :size="parent_size"
            :is-interactive="parent_isInteractive"
            :is-draggable="parent_isDraggable"
            :icon="ICONS[parent_icon]"
            :icon-color="parent_iconColor"
            :icon-color-hex="parent_iconColorHex"
            :has-draggable-handler="parent_hasDraggableHandler"
            :has-actions-slot-divider="parent_hasActionsSlotDivider"
            @click="onClick"
                        @update:is-selected="updateParentIsSelected"
          >
            ${l}
          </rich-list-item>
        </template>
        <template #children>
          <rich-list-item
            :state="child_state"
            :is-dimmed="child_isDimmed"
            :type="RICH_LIST_ITEM_TYPE.FLAT"
            :is-selectable="child_isSelectable"
            :is-selected="child_isSelected"
            :size="child_size"
            :is-interactive="child_isInteractive"
            :is-draggable="child_isDraggable"
            :icon="ICONS[child_icon]"
            :icon-color="child_iconColor"
            :icon-color-hex="child_iconColorHex"
            :has-draggable-handler="child_hasDraggableHandler"
            :has-actions-slot-divider="child_hasActionsSlotDivider"
            @update:is-selected="updateChildIsSelected"
          >
            ${l}
          </rich-list-item>
          <divider />
          <rich-list-item
            :state="child_state"
            :is-dimmed="child_isDimmed"
            :type="RICH_LIST_ITEM_TYPE.FLAT"
            :is-selectable="child_isSelectable"
            :is-selected="child_isSelected"
            :size="child_size"
            :is-interactive="child_isInteractive"
            :is-draggable="child_isDraggable"
            :icon="ICONS[child_icon]"
            :icon-color="child_iconColor"
            :icon-color-hex="child_iconColorHex"
            :has-draggable-handler="child_hasDraggableHandler"
            :has-actions-slot-divider="child_hasActionsSlotDivider"
            @update:is-selected="updateChildIsSelected"
          >
            ${l}
          </rich-list-item>
          <divider />
          <rich-list-item
            :state="child_state"
            :is-dimmed="child_isDimmed"
            :type="RICH_LIST_ITEM_TYPE.FLAT"
            :is-selectable="child_isSelectable"
            :is-selected="child_isSelected"
            :size="child_size"
            :is-interactive="child_isInteractive"
            :is-draggable="child_isDraggable"
            :icon="ICONS[child_icon]"
            :icon-color="child_iconColor"
            :icon-color-hex="child_iconColorHex"
            :has-draggable-handler="child_hasDraggableHandler"
            :has-actions-slot-divider="child_hasActionsSlotDivider"
            @update:is-selected="updateChildIsSelected"
          >
            ${l}
          </rich-list-item>
        </template>
      </group-rich-list-item>
    `}),s=C(T.bind({}));r.parameters={...r.parameters,docs:{...r.parameters?.docs,source:{originalSource:"expandStory(OneChildStoryTemplate.bind({}))",...r.parameters?.docs?.source}}};s.parameters={...s.parameters,docs:{...s.parameters?.docs,source:{originalSource:"expandStory(MultipleChildStoryTemplate.bind({}))",...s.parameters?.docs?.source}}};const M=["OneChild","MultipleChild"];export{s as MultipleChild,r as OneChild,M as __namedExportsOrder,R as default};
