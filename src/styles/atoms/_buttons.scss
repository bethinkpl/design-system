@mixin outlinedColor($color) {
	color: rgba($color, 1);

	&:disabled,
	&.-disabled {
		color: rgba($color, 1 - $button-disabled-alpha);
	}
}

@mixin textColor($color, $hover-color: '', $focus-color: '', $disabled-color: '') {
	color: $color;
	@if $hover-color == '' {
		$hover-color: mix($color, $color-firefly-black, (1 - $button-hover-alpha) * 100%);
	}
	@if $focus-color == '' {
		$focus-color: mix($color, $color-firefly-black, (1 - $button-focus-alpha) * 100%);
	}
	@if $disabled-color == '' {
		$disabled-color: mix($color, $color-total-white, (1 - $button-disabled-alpha) * 100%);
	}

	&:hover,
	&.-hovered,
	&:active,
	&.-active {
		color: $hover-color;
	}

	&:focus,
	&.-focused {
		color: $focus-color;
	}

	&:disabled,
	&.-disabled {
		color: $disabled-color;
	}
}

.a-button {
	$self: &;

	@include buttonM;

	align-items: center;
	background-color: transparent; // override defaut <button> background color
	border: 0;
	border-radius: 100px;
	color: $color-total-white;
	cursor: pointer;
	display: inline-flex;
	min-height: $button-medium-min-height;
	font-weight: 700;
	justify-content: center;
	outline: none;
	padding: $space-xxxxs $space-s;
	position: relative;
	text-transform: uppercase;
	transform-style: preserve-3d;
	transition: color ease-in-out $button-animation-time,
		border-color ease-in-out $button-animation-time,
		background-color ease-in-out $button-animation-time;
	user-select: none;

	&:disabled,
	&.-disabled {
		cursor: not-allowed;
		pointer-events: none;
	}

	&:not(.-text) {
		min-width: 100px;

		&::before,
		&::after {
			border-radius: inherit;
			bottom: 0;
			content: '';
			left: 0;
			pointer-events: none;
			position: absolute;
			transition: opacity ease-in-out $button-animation-time,
				background-color ease-in-out $button-animation-time;
			right: 0;
			top: 0;
		}

		&::before {
			background-color: $color-firefly-black;
			opacity: 0;
			transform: translateZ(-1px);
		}

		&::after {
			background-color: $color-primary;
			transform: translateZ(-2px);
		}

		&:hover,
		&.-hovered,
		&:active,
		&.-active {
			&::before {
				opacity: $button-hover-alpha;
			}
		}

		&:focus,
		&.-focused {
			&::before {
				opacity: $button-focus-alpha;
			}
		}

		&:not(.-outlined) {
			&:disabled,
			&.-disabled {
				&::before {
					background-color: $color-total-white;
					opacity: $button-disabled-alpha;
				}
			}
		}
	}

	&.-large {
		@include buttonL;

		min-height: $button-large-min-height;
		padding-left: $space-m;
		padding-right: $space-m;
	}

	&.-small {
		@include buttonS;

		min-height: $button-small-min-height;
	}

	@each $color-name, $color-map in $theme-calculated-colors {
		&.-color-#{$color-name}:after {
			background-color: map-get($color-map, 'color');
		}
	}

	@each $color-name, $color in $regular-colors {
		&.-color-#{$color-name}:after {
			background-color: $color;
		}
	}

	&.-rounded {
		border-radius: $radius-s;
		padding-left: $space-xs;
		padding-right: $space-xs;

		&.-large {
			padding-left: $space-s;
			padding-right: $space-s;
		}
	}

	&.-outlined {
		@include outlinedColor($color-primary-rgb);

		border: 1px solid currentColor;

		&::before {
			background-color: currentColor;
		}

		&::after {
			background-color: transparent;
		}

		&.-elevation-x-small,
		&.-elevation-small {
			&::after {
				background-color: $color-total-white;
			}
		}

		.ripple {
			background-color: currentColor !important;
			opacity: $button-ripple-alpha;
		}

		@each $color-name, $color-map in $theme-calculated-colors {
			&.-color-#{$color-name} {
				@include outlinedColor(map-get($color-map, 'rgb'));
			}
		}

		@each $color-name, $color in $regular-colors {
			&.-color-#{$color-name} {
				@include outlinedColor($color);
			}
		}
	}

	&.-text {
		@include textColor(
			$color-primary,
			$color-primary-hovered,
			$color-primary-focused,
			$color-primary-disabled
		);
		border: none;
		border-radius: 0;
		padding-left: 0;
		padding-right: 0;

		@each $color-name, $color-map in $theme-calculated-colors {
			&.-color-#{$color-name} {
				@include textColor(
					map-get($color-map, 'color'),
					map-get($color-map, 'hovered'),
					map-get($color-map, 'focused'),
					map-get($color-map, 'disabled')
				);
			}
		}

		@each $color-name, $color in $regular-colors {
			&.-color-#{$color-name} {
				@include textColor($color);
			}
		}
	}

	&.-loading {
		pointer-events: none;

		#{$self}__content {
			opacity: 0;
		}

		#{$self}__loadingIcon {
			animation: a-fadeIn 300ms ease-in-out 0s 1, a-spinAround 1500ms infinite linear;
			position: absolute;
		}
	}

	&.-elevation-small {
		box-shadow: $default-shadow;
	}

	&__content {
		align-items: center;
		display: inline-flex;
		transition: opacity ease-in-out $button-animation-time;
	}

	&__icon {
		&.-left {
			margin-right: $space-xxxxs;
		}

		&.-right {
			margin-left: $space-xxxxs;
		}
	}

	.ripple {
		background-color: rgba($color-total-white, $button-ripple-alpha) !important;
	}
}
