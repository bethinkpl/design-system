$button-small-min-height: 28px;
$button-medium-min-height: 32px;
$button-large-min-height: 48px;

$hover-alpha: 0.12;
$focus-alpha: 0.24;
$disabled-alpha: 0.6;
$ripple-alpha: 0.16;

$animation-time: 0.3s;

@mixin outlinedColor($color) {
	border-color: rgba($color, 1);
	color: rgba($color, 1);

	&::before {
		background-color: rgba($color, 1);
	}

	&:disabled,
	&.-disabled {
		border-color: rgba($color, 1 - $disabled-alpha);
		color: rgba($color, 1 - $disabled-alpha);
	}

	.ripple {
		background-color: rgba($color, $ripple-alpha) !important;
	}
}

@mixin textColor($color) {
	color: $color;

	&:hover,
	&.-hovered,
	&:active,
	&.-active {
		color: mix($color, $color-firefly-black, (1 - $hover-alpha) * 100%);
	}

	&:focus,
	&.-focused {
		color: mix($color, $color-firefly-black, (1 - $focus-alpha) * 100%);
	}

	&:disabled,
	&.-disabled {
		color: mix($color, $color-total-white, (1 - $disabled-alpha) * 100%);
	}
}

.a-button {
	$self: &;

	@include headlineXXS;

	align-items: center;
	background-color: transparent; // override defaut <button> background color
	border: 0;
	border-radius: 100px;
	color: $color-total-white;
	cursor: pointer;
	display: inline-flex;
	min-height: $button-medium-min-height;
	font-weight: 700;
	justify-content: center;
	outline: none;
	padding: $space-xxxxs $space-s;
	position: relative;
	text-transform: uppercase;
	transform-style: preserve-3d;
	transition: color ease-in-out $animation-time, border-color ease-in-out $animation-time,
		background-color ease-in-out $animation-time;
	user-select: none;

	&:disabled,
	&.-disabled {
		cursor: not-allowed;
		pointer-events: none;
	}

	&:not(.-text) {
		min-width: 100px;

		&::before,
		&::after {
			border-radius: inherit;
			bottom: 0;
			content: '';
			left: 0;
			pointer-events: none;
			position: absolute;
			transition: opacity ease-in-out $animation-time,
				background-color ease-in-out $animation-time;
			right: 0;
			top: 0;
		}

		&::before {
			background-color: $color-firefly-black;
			opacity: 0;
			transform: translateZ(-1px);
		}

		&::after {
			background-color: $color-primary;
			transform: translateZ(-2px);
		}

		&:hover,
		&.-hovered,
		&:active,
		&.-active {
			&::before {
				opacity: $hover-alpha;
			}
		}

		&:focus,
		&.-focused {
			&::before {
				opacity: $focus-alpha;
			}
		}

		&:not(.-outlined) {
			&:hover,
			&.-hovered,
			&:active,
			&.-active {
				color: $color-total-white; // override bulma a:hover
			}

			&:disabled,
			&.-disabled {
				&::before {
					background-color: $color-total-white;
					opacity: $disabled-alpha;
				}
			}
		}
	}

	&.-large {
		@include headlineXS;

		min-height: $button-large-min-height;
		padding-left: $space-m;
		padding-right: $space-m;
	}

	&.-small {
		@include textInfoM;

		min-height: $button-small-min-height;
	}

	&.-minor::after {
		background-color: $color-minor;
	}

	&.-danger::after {
		background-color: $color-danger;
	}

	&.-warning::after {
		background-color: $color-warning;
	}

	&.-success::after {
		background-color: $color-success;
	}

	&.-rounded {
		border-radius: $radius-s;
		padding-left: $space-xs;
		padding-right: $space-xs;

		&.-large {
			padding-left: $space-s;
			padding-right: $space-s;
		}
	}

	&.-outlined {
		@include outlinedColor($color-primary-rgb);

		border: 1px solid;

		&::after {
			background-color: $color-total-white;
		}

		&.-minor {
			@include outlinedColor($color-minor);
		}

		&.-danger {
			@include outlinedColor($color-danger);
		}

		&.-warning {
			@include outlinedColor($color-warning);
		}

		&.-success {
			@include outlinedColor($color-success);
		}
	}

	&.-text {
		border: none;
		border-radius: 0;
		color: $color-primary;
		padding-left: 0;
		padding-right: 0;

		&:hover,
		&.-hovered,
		&:active,
		&.-active {
			color: $color-primary-hovered;
		}

		&:focus,
		&.-focused {
			color: $color-primary-focused;
		}

		&:disabled,
		&.-disabled {
			color: $color-primary-disabled;
		}

		&.-minor {
			@include textColor($color-minor);
		}

		&.-danger {
			@include textColor($color-danger);
		}

		&.-warning {
			@include textColor($color-warning);
		}

		&.-success {
			@include textColor($color-success);
		}
	}

	&.-loading {
		pointer-events: none;

		#{$self}__content {
			opacity: 0;
		}

		#{$self}__loadingIcon {
			animation: a-fadeIn 300ms ease-in-out 0s 1, a-spinAround 1500ms infinite linear;
			position: absolute;
		}
	}

	&__content {
		align-items: center;
		display: inline-flex;
		transition: opacity ease-in-out $animation-time;
	}

	&__icon {
		&.-left {
			margin-right: $space-xxxxs;
		}

		&.-right {
			margin-left: $space-xxxxs;
		}
	}

	.ripple {
		background-color: rgba($color-total-white, $ripple-alpha) !important;
	}
}
