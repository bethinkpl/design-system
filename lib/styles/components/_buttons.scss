@import '../settings/animations';
@import '../settings/spacings';
@import '../settings/radiuses';
@import '../settings/buttons';
@import '../settings/shadows';
@import '../settings/icons';
@import '../settings/typography/tokens';

@mixin setButtonColor($color, $color-hovered: null, $color-focused: null, $color-disabled: null) {
	color: $color;

	&:hover,
	&.-ds-hovered,
	&:active,
	&.-ds-active {
		color: $color-hovered;
	}

	&:focus,
	&.-ds-focused {
		color: $color-focused;
	}

	&.-ds-disabled {
		color: $color-disabled;
	}
}

@mixin setButtonBackground(
	$background,
	$background-hover,
	$background-focus,
	$background-disabled
) {
	@if not $background {
		background-color: transparent;
	}

	background-color: $background;

	&:hover,
	&.-ds-hovered,
	&:active,
	&.-ds-active {
		background-color: $background-hover;
	}

	&:focus,
	&.-ds-focused {
		background-color: $background-focus;
	}

	&:disabled,
	&.-ds-disabled {
		background-color: $background-disabled;
	}
}

@mixin setButtonDisabled(
	$disabled-color: null,
	$disabled-icon: null,
	$disabled-background: null,
	$disabled-border: null
) {
	&:disabled,
	&.-ds-disabled {
		background-color: $disabled-background;
		border-color: $disabled-border;
		color: $disabled-color;

		.ds-button__icon {
			color: $disabled-icon;
		}
	}
}

@mixin setButtonAdditions(
	$border: null,
	$icon: null,
	$icon-hovered: null,
	$icon-focused: null,
	$icon-disabled: null
) {
	@if $border {
		border: 1px solid $border;
	}

	.ds-button {
		&__icon,
		&__loadingIcon {
			color: $icon;
		}
	}

	&.-ds-hovered,
	&:hover {
		.ds-button {
			&__icon,
			&__loadingIcon {
				color: $icon-hovered;
			}
		}
	}

	&.-ds-focused,
	&:focus {
		.ds-button {
			&__icon,
			&__loadingIcon {
				color: $icon-focused;
			}
		}
	}

	&.-ds-disabled {
		.ds-button {
			&__icon,
			&__loadingIcon {
				color: $icon-disabled;
			}
		}
	}
}

$button-small-min-height: 28px;
$button-medium-min-height: 32px;
$button-large-min-height: 48px;

$button-hover-alpha: 0.12;
$button-focus-alpha: 0.24;
$button-disabled-alpha: 0.6;

.ds-button {
	$self: &;

	@include button-m-default-bold-uppercase;

	@each $color-name, $color-map in $icon-button-colors {
		&.-ds-color-#{$color-name} {
			@include setButtonColor(map-get($color-map, 'filled', 'color'));
			@include setButtonBackground(
				map-get($color-map, 'filled', 'background'),
				map-get($color-map, 'filled', 'background-hovered'),
				map-get($color-map, 'filled', 'background-focused'),
				map-get($color-map, 'filled', 'background-disabled')
			);
			@include setButtonDisabled(
				map-get($color-map, 'filled', 'disabled', 'color'),
				map-get($color-map, 'filled', 'disabled', 'icon'),
				map-get($color-map, 'filled', 'disabled', 'background')
			);
			@include setButtonAdditions(null, map-get($color-map, 'filled', 'icon'));
		}
	}

	align-items: center;
	background-color: transparent; // override defaut <button> background color
	border: 0;
	border-radius: 100px;
	cursor: pointer;
	display: inline-flex;
	justify-content: center;
	min-height: $button-medium-min-height;
	outline: none;
	padding: $space-4xs $space-s;
	position: relative;
	transform-style: preserve-3d;
	transition: color ease-in-out $default-transition-time,
		border-color ease-in-out $default-transition-time,
		background-color ease-in-out $default-transition-time;
	user-select: none;

	&:disabled,
	&.-ds-disabled {
		cursor: not-allowed;
		pointer-events: none;
	}

	&.-ds-outlined {
		@each $color-name, $color-map in $icon-button-colors {
			&.-ds-color-#{$color-name} {
				@include setButtonColor(map-get($color-map, 'outlined', 'color'));
				@include setButtonBackground(
					map-get($color-map, 'outlined', 'background'),
					map-get($color-map, 'outlined', 'background-hovered'),
					map-get($color-map, 'outlined', 'background-focused'),
					map-get($color-map, 'outlined', 'background-disabled')
				);
				@include setButtonDisabled(
					map-get($color-map, 'outlined', 'disabled', 'color'),
					map-get($color-map, 'outlined', 'disabled', 'icon'),
					map-get($color-map, 'outlined', 'disabled', 'background'),
					map-get($color-map, 'outlined', 'disabled', 'border')
				);
				@include setButtonAdditions(
					map-get($color-map, 'outlined', 'border'),
					map-get($color-map, 'outlined', 'icon')
				);
			}
		}
	}

	&.-ds-large {
		@include button-l-default-bold-uppercase;

		min-height: $button-large-min-height;
		padding-left: $space-m;
		padding-right: $space-m;
	}

	&.-ds-text {
		@each $color-name, $color-map in $icon-button-colors {
			&.-ds-color-#{$color-name} {
				@include setButtonColor(
					map-get($color-map, 'text', 'color'),
					map-get($color-map, 'text', 'color-hovered'),
					map-get($color-map, 'text', 'color-focused'),
					map-get($color-map, 'text', 'color-disabled')
				);
				@include setButtonBackground(null, null, null, null);
				@include setButtonDisabled(
					map-get($color-map, 'text', 'disabled', 'color'),
					map-get($color-map, 'text', 'disabled', 'icon')
				);
				@include setButtonAdditions(
					null,
					map-get($color-map, 'text', 'icon'),
					map-get($color-map, 'text', 'icon-hovered'),
					map-get($color-map, 'text', 'icon-focused'),
					map-get($color-map, 'text', 'disabled', 'icon')
				);
			}
		}

		border: none;
		border-radius: 0;
		padding-left: 0;
		padding-right: 0;
	}

	&:not(.-ds-text) {
		min-width: 100px;

		&.-ds-rounded {
			border-radius: $radius-s;
			padding-left: $space-xs;
			padding-right: $space-xs;

			&.-ds-large {
				padding-left: $space-s;
				padding-right: $space-s;
			}
		}
	}

	&.-ds-small {
		@include button-s-default-bold-uppercase;

		min-height: $button-small-min-height;
	}

	&.-ds-loading {
		pointer-events: none;

		#{$self}__content {
			opacity: 0;
		}
	}

	&.-ds-elevation-x-small,
	&.-ds-elevation-small {
		&.-ds-outlined {
			&::before {
				background: $color-default-background;
				border-radius: 100px;
				bottom: 0;
				content: '';
				display: block;
				left: 0;
				position: absolute;
				right: 0;
				top: 0;
				transform: translateZ(-1px);
				z-index: -1;
			}
		}

		&.-ds-rounded {
			&::before {
				border-radius: $radius-s;
			}
		}
	}

	&.-ds-elevation-small {
		&:not(.-ds-text) {
			box-shadow: $shadow-l;
		}
	}

	&__content {
		align-items: center;
		display: inline-flex;
	}

	&__icon {
		&.-ds-left {
			margin-right: $space-4xs;
		}

		&.-ds-right {
			margin-left: $space-4xs;
		}
	}

	&__loadingIcon {
		animation: $animation-fade-in, $animation-spin;
		position: absolute;
	}
}
