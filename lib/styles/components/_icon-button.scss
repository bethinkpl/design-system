@import '../settings/animations';
@import '../settings/buttons';
@import '../settings/icons';
@import '../settings/media-queries';
@import '../settings/spacings';
@import '../settings/typography';

@mixin setIconButtonAdditions($ripple: null, $border: null, $icon: null) {
	@if $ripple != null {
		.ripple {
			background-color: $ripple !important;
		}
	}

	@if $ripple == null {
		.ripple {
			display: none;
		}
	}

	@if $border != null {
		border: 1px solid $border;
	}

	@if $icon != null {
		.a-iconButton {
			&__icon,
			&__loadingIcon {
				color: $icon;
			}
		}
	}
}

.a-iconButton {
	$self: &;

	@each $color-name, $color-map in $icon-button-colors {
		&.-color-#{$color-name} {
			#{$self}__label {
				color: map-get($color-map, 'outlined', 'color');
			}

			&:hover,
			&.-hovered {
				#{$self}__button {
					background-color: map-get($color-map, 'filled', 'background-hovered');

					&.-outlined {
						background-color: map-get($color-map, 'outlined', 'background-hovered');
						color: map-get($color-map, 'inverted', 'icon');
					}
				}
				#{$self}__label {
					color: map-get($color-map, 'filled', 'color-hovered');
				}
			}

			&:focus,
			&.-focused {
				#{$self}__button {
					background-color: map-get($color-map, 'filled', 'background-focused');

					&.-outlined {
						background-color: map-get($color-map, 'outlined', 'background-focused');
						color: map-get($color-map, 'inverted', 'icon');
					}
				}
				#{$self}__label {
					color: map-get($color-map, 'filled', 'color-focused');
				}
			}

			&.-disabled {
				#{$self}__button {
					background-color: map-get($color-map, 'filled', 'background-disabled');

					&.-outlined {
						background-color: map-get($color-map, 'outlined', 'background');
						border-color: map-get($color-map, 'outlined', 'disabled', 'border');

						.a-iconButton__icon {
							color: map-get($color-map, 'outlined', 'disabled', 'icon');
						}
					}
				}

				#{$self}__label {
					color: map-get($color-map, 'outlined', 'disabled', 'color');
				}
			}

			@include setIconButtonAdditions(
				map-get($color-map, 'filled', 'ripple'),
				null,
				map-get($color-map, 'filled', 'icon')
			);
			.-outlined {
				@include setIconButtonAdditions(
					map-get($color-map, 'outlined', 'ripple'),
					map-get($color-map, 'outlined', 'border'),
					map-get($color-map, 'outlined', 'icon')
				);
			}
		}
	}

	align-items: center;
	color: $color-primary-text;
	cursor: pointer;
	display: inline-flex;
	transition: color ease-in-out $default-transition-time;

	&:disabled,
	&.-disabled {
		pointer-events: none;
	}

	&:hover {
		color: map-get($icon-button-colors, 'theme', 'hovered');
	}

	&__button {
		height: $icon-button-medium-size;
		min-height: auto;
		min-width: auto;
		padding: 0;
		width: $icon-button-medium-size;

		&.-iconOnly {
			border: none;
		}
	}

	&__label {
		@include buttonM;

		display: none;
		font-weight: bold;
		margin-right: $space-xs;
		text-transform: uppercase;

		@media #{breakpoint-s()} {
			display: initial;
		}

		&.-neutral {
			color: $color-neutral-text !important;
		}

		&.-neutral-weak {
			color: $color-neutral-text-weak !important;
		}
	}

	/* Exception for scheme neutral-label, it has class `-neutral` deep in a-iconButton__label only for 1 case.
  So there is no sense to set it in main loop
  */
	&:hover,
	&.-hovered {
		.a-iconButton__label {
			&.-neutral {
				color: $color-neutral-text-hovered !important;
			}

			&.-neutral-weak {
				color: $color-neutral-text-weak-disabled !important;
			}
		}
	}

	&:focus,
	&.-focused {
		.a-iconButton__label {
			&.-neutral {
				color: $color-neutral-text-focused !important;
			}

			&.-neutral-weak {
				color: $color-neutral-text-weak-focused !important;
			}
		}
	}

	&.-disabled {
		#{$self}__label {
			&.-neutral {
				color: $color-neutral-text-disabled !important;
			}

			&.-neutral-weak {
				color: $color-neutral-text-weak-disabled !important;
			}
		}
	}

	&.-x-small {
		#{$self}__button {
			height: $icon-button-x-small-size;
			width: $icon-button-x-small-size;
		}

		#{$self}__label {
			@include buttonXS;
		}
	}

	&.-small {
		#{$self}__button {
			height: $icon-button-small-size;
			width: $icon-button-small-size;
		}

		#{$self}__label {
			@include buttonS;
		}
	}

	&.-large {
		#{$self}__button {
			height: $icon-button-large-size;
			width: $icon-button-large-size;
		}
	}

	&.-touchable {
		align-items: center;
		justify-content: center;
		min-height: $min-touchable-size;
		min-width: $min-touchable-size;
	}
}
