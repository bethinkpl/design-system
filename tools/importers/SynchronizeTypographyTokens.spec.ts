import { ImportTypographyVariables, ImportTypographyTokens } from './SynchronizeTypographyTokens';
import { promises, unlinkSync, readFileSync } from 'fs';
const tokensFilesConfig = {
	destinationPath: 'tools/importers/temp/',
	bin: {
		id: '633d96230e6a79321e1dec41',
		files: {
			input: {
				name: 'tokens.json',
			},
			variablesRaw: {
				destinationVariables: '_variables.scss',
				destinationVariablesCss: '_variables-css.scss',
				destinationVariablesCssJson: '_variables-css.json',
			},
			tokens: {
				destination: '_tokens.scss',
				destinationJson: '_tokens.json',
			},
		},
	},
	jsonBinApiUrl: 'https://api.jsonbin.io/v3/b/',
};

describe('Typography Tokens', () => {
	let inputTokensRaw: Buffer = readFileSync(
		tokensFilesConfig.destinationPath + tokensFilesConfig.bin.files.input.name,
	);
	let inputTokens = JSON.parse(inputTokensRaw.toString());

	it('check files generated by importer', async () => {
		await ImportTypographyVariables(
			tokensFilesConfig,
			inputTokens.values.LMSDesignSystemTypography,
		);
		await ImportTypographyTokens(
			tokensFilesConfig,
			inputTokens.values.LMSDesignSystemTypography,
		);

		await new Promise((r) => setTimeout(r, 1));

		let variableFileRaw = await promises.readFile(
			tokensFilesConfig.destinationPath +
				tokensFilesConfig.bin.files.variablesRaw.destinationVariables,
			'utf8',
		);
		let variableFileSplit = variableFileRaw.split(/\r?\n/);
		expect(variableFileSplit[0]).toBe(
			'$typography-font-size-base: var(--typography-font-size-base);',
		);

		unlinkSync(
			tokensFilesConfig.destinationPath +
				tokensFilesConfig.bin.files.variablesRaw.destinationVariables,
		);

		let variableFileCss = await promises.readFile(
			tokensFilesConfig.destinationPath +
				tokensFilesConfig.bin.files.variablesRaw.destinationVariablesCss,
			'utf8',
		);
		let variableFileCssSplit = variableFileCss.split(/\r?\n/);
		expect(variableFileCssSplit[0]).toBe(':root {');
		expect(variableFileCssSplit[1]).toBe('\t--typography-font-size-base: 16px;');

		unlinkSync(
			tokensFilesConfig.destinationPath +
				tokensFilesConfig.bin.files.variablesRaw.destinationVariablesCss,
		);

		let variableFileJson = await promises.readFile(
			tokensFilesConfig.destinationPath +
				tokensFilesConfig.bin.files.variablesRaw.destinationVariablesCssJson,
			'utf8',
		);
		let variableFileJsonSplit = JSON.parse(variableFileJson);
		expect(variableFileJsonSplit.fontSize[0].label).toBe('typography-font-size-base');
		expect(variableFileJsonSplit.fontSize[0].value).toBe('16px');

		unlinkSync(
			tokensFilesConfig.destinationPath +
				tokensFilesConfig.bin.files.variablesRaw.destinationVariablesCssJson,
		);

		let variableFileTokens = await promises.readFile(
			tokensFilesConfig.destinationPath + tokensFilesConfig.bin.files.tokens.destination,
			'utf8',
		);
		let variableFileTokensSplit = variableFileTokens.split(/\r?\n/);
		expect(variableFileTokensSplit[0]).toBe("@import 'variables';");
		expect(variableFileTokensSplit[3]).toBe('\t--token: display-heading-m-regular;');

		unlinkSync(
			tokensFilesConfig.destinationPath + tokensFilesConfig.bin.files.tokens.destination,
		);

		let variableFileJsonTokens = await promises.readFile(
			tokensFilesConfig.destinationPath + tokensFilesConfig.bin.files.tokens.destinationJson,
			'utf8',
		);
		let variableFileJsonTokensSplit = JSON.parse(variableFileJsonTokens);
		expect(variableFileJsonTokensSplit.DisplayHeading[0].token).toBe(
			'display-heading-m-regular',
		);
		expect(variableFileJsonTokensSplit.DisplayHeading[0].attributes).toContain('font-size-4xl');

		unlinkSync(
			tokensFilesConfig.destinationPath + tokensFilesConfig.bin.files.tokens.destinationJson,
		);
	});
});
