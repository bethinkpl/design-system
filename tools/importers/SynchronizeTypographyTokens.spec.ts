import { ImportTypographyVariables, ImportTypographyTokens } from './SynchronizeTypographyTokens';
const fs = require('fs');
const tokensFilesConfig = require('./configs/FakeSynchronizeTypographyTokensConfig.json');

describe('Typography Tokens', () => {
	let inputTokensRaw = fs.readFileSync(
		tokensFilesConfig.destinationPath + tokensFilesConfig.bin.files.input.name,
	);
	let inputTokens = JSON.parse(inputTokensRaw);

	it('check files generated by importer', async () => {
		await ImportTypographyVariables(
			tokensFilesConfig,
			inputTokens.values.LMSDesignSystemTypography,
		);
		await ImportTypographyTokens(
			tokensFilesConfig,
			inputTokens.values.LMSDesignSystemTypography,
		);

		await new Promise((r) => setTimeout(r, 1));

		let variableFileRaw = await fs.promises.readFile(
			tokensFilesConfig.destinationPath +
				tokensFilesConfig.bin.files.variablesRaw.destinationVariables,
			'utf8',
		);
		let variableFileSplit = variableFileRaw.split(/\r?\n/);
		expect(variableFileSplit[0]).toBe(
			'$typography-font-size-base: var(--typography-font-size-base);',
		);

		fs.unlinkSync(
			tokensFilesConfig.destinationPath +
				tokensFilesConfig.bin.files.variablesRaw.destinationVariables,
		);

		let variableFileCss = await fs.promises.readFile(
			tokensFilesConfig.destinationPath +
				tokensFilesConfig.bin.files.variablesRaw.destinationVariablesCss,
			'utf8',
		);
		let variableFileCssSplit = variableFileCss.split(/\r?\n/);
		expect(variableFileCssSplit[0]).toBe(':root {');
		expect(variableFileCssSplit[1]).toBe('\t--typography-font-size-base: 16px;');

		fs.unlinkSync(
			tokensFilesConfig.destinationPath +
				tokensFilesConfig.bin.files.variablesRaw.destinationVariablesCss,
		);

		let variableFileJson = await fs.promises.readFile(
			tokensFilesConfig.destinationPath +
				tokensFilesConfig.bin.files.variablesRaw.destinationVariablesCssJson,
			'utf8',
		);
		let variableFileJsonSplit = JSON.parse(variableFileJson);
		expect(variableFileJsonSplit.fontSize[0].label).toBe('typography-font-size-base');
		expect(variableFileJsonSplit.fontSize[0].value).toBe('16px');

		fs.unlinkSync(
			tokensFilesConfig.destinationPath +
				tokensFilesConfig.bin.files.variablesRaw.destinationVariablesCssJson,
		);

		let variableFileTokens = await fs.promises.readFile(
			tokensFilesConfig.destinationPath + tokensFilesConfig.bin.files.tokens.destination,
			'utf8',
		);
		let variableFileTokensSplit = variableFileTokens.split(/\r?\n/);
		expect(variableFileTokensSplit[0]).toBe("@import 'variables';");
		expect(variableFileTokensSplit[3]).toBe('\t--token: displayHeading-m-regular;');

		fs.unlinkSync(
			tokensFilesConfig.destinationPath + tokensFilesConfig.bin.files.tokens.destination,
		);

		let variableFileJsonTokens = await fs.promises.readFile(
			tokensFilesConfig.destinationPath + tokensFilesConfig.bin.files.tokens.destinationJson,
			'utf8',
		);
		let variableFileJsonTokensSplit = JSON.parse(variableFileJsonTokens);
		expect(variableFileJsonTokensSplit.DisplayHeading[0].token).toBe(
			'displayHeading-m-regular',
		);
		expect(variableFileJsonTokensSplit.DisplayHeading[0].attributes).toContain('font-size-4xl');

		fs.unlinkSync(
			tokensFilesConfig.destinationPath + tokensFilesConfig.bin.files.tokens.destinationJson,
		);
	});
});
